/*
Cuckoo Sandbox - Automated Malware Analysis.
Copyright (C) 2010-2014 Cuckoo Foundation.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include <stdio.h>
#include <stdint.h>
#include "hooks.h"
#include "dropped.h"
#include "flags.h"
#include "hooking.h"
#include "hook-info.h"
#include "monitor.h"
#include "ntapi.h"
#include "log.h"
#include "misc.h"
#include "misc2.h"
#include "pipe.h"
#include "sleep.h"
#include "unhook.h"

{% macro log_api(hook, ret='') -%}
    log_api(SIG_{{ hook.apiname }},
        {{ ret or hook.signature.is_success }},
        {%- if hook.signature.return_value != 'void' %}
        {% if ret %}{{ ret }}{% else %}(uintptr_t) ret{% endif %},
        {%- else %}
        0,
        {%- endif %}
        "
    {%- for param in hook.parameters|selectattr('log'): -%}
        {{ types[param.argtype] }}
    {%- endfor -%}
    {%- for log in hook.logging: -%}
        {{ log.argtype }}
    {%- endfor -%}
        "
    {%- for param in hook.parameters: -%}
        {% if param.log == True: -%}
        ,
        {{ param.argname }}
        {%- endif %}
    {%- endfor %}
    {%- for log in hook.logging: -%}
        ,
        {{ log.argvalue }}
    {%- endfor %}
    );
{%- endmacro %}

{% macro call_old(hook) -%}
    {%- if hook.signature.return_value != 'void' %}
    {{ hook.signature.return_value }} ret = Old_{{ hook.apiname }}(
    {%- else %}
    Old_{{ hook.apiname }}(
    {%- endif %}
    {%- for param in hook.parameters: %}
        {% if param.argname in hook.replace -%}
            {{ hook.replace[param.argname] }}
        {%- else -%}
            {{ param.argname }}
        {%- endif %}
        {%- if not loop.last %},{% endif -%}
    {%- endfor %}
    );
{%- endmacro %}

{%- for hook in sigs if hook.is_hook: %}


{{ hook.signature.return_value }} ({{ hook.signature.calling_convention }} *Old_{{ hook.apiname }})(
{%- for param in hook.parameters: %}
    {{ param.argtype }}
    {%- if not param.argtype.endswith('*') %} {% endif -%}
    {{ param.argname }}
    {%- if not loop.last %},{% endif -%}
{%- endfor %}
);

{{ hook.signature.return_value }} {{ hook.signature.calling_convention }} New_{{ hook.apiname }}(
{%- for param in hook.parameters: %}
    {{ param.argtype }}
    {%- if not param.argtype.endswith('*') %} {% endif -%}
    {{ param.argname }}
    {%- if not loop.last %},{% endif -%}
{%- endfor %}
) {
    {%- for param in hook.ensure.keys(): %}
    {{ hook.ensure[param] }} _{{ param }};
    if({{ param }} == NULL) {
        {{ param }} = &_{{ param }};
        memset(&_{{ param }}, 0, sizeof({{ hook.ensure[param] }}));
    }
    {% endfor %}

    {%- if hook.pre: %}
    {%- for line in hook.pre: %}
    {{ line }}
    {%- endfor %}
    {% endif %}

    {%- if hook.prelog: %}
    log_api_pre({{ hook.prelog|join(',', attribute='argvalue') }});
    {% endif -%}

    {%- if hook.signature.prelog == 'instant' %}
    {{ log_api(hook, ret='0') }}
    {% endif %}

    {{- call_old(hook) }}

    {%- if hook.middle: %}
    {% for line in hook.middle: %}
    {{ line }}
    {%- endfor %}
    {%- endif %}

    {%- if hook.signature.special: %}
    if(hook_info()->hook_count == 1) {
        {{ log_api(hook)|indent }}
    }
    {%- else %}

    {{ log_api(hook) }}
    {%- endif %}

    {%- if hook.post: %}
    {% for line in hook.post: %}
    {{ line }}
    {%- endfor %}
    {%- endif %}
    {%- if hook.signature.return_value != 'void' %}
    return ret;
    {%- endif %}
}

{%- endfor %}

const char *g_explain_apinames[] = {
{%- for hook in sigs: %}
    "{{ hook.apiname }}",
{%- endfor %}
    NULL,
};

const char *g_explain_categories[] = {
{%- for hook in sigs: %}
    // {{ hook.apiname }}
    "{{ hook.signature.category }}",
{%- endfor %}
};

const char *g_explain_paramtypes[] = {
{%- for hook in sigs: %}
    // {{ hook.apiname }}
    "
    {%- for param in hook.prelog: -%}
        {{ param.argtype }}
    {%- endfor -%}
    {%- for param in hook.parameters: -%}
        {% if param.log %}{{ types[param.argtype] }}{% endif %}
    {%- endfor -%}
    {%- for param in hook.logging: -%}
        {{ param.argtype }}
    {%- endfor -%}
    ",
{%- endfor %}
};

const char *g_explain_paramnames[][16] = {
{%- for hook in sigs: %}
    // {{ hook.apiname }}
    {
    {%- for param in hook.prelog: %}
        "{{ param.argname }}",
    {%- endfor %}
    {%- for param in hook.parameters|selectattr('log'): %}
        "{{ param.alias }}",
    {%- endfor %}
    {%- for param in hook.logging: %}
        "{{ param.argname }}",
    {%- endfor %}
    },
{%- endfor %}
};

hook_t g_hooks[] = {
{%- for hook in sigs: %}
    {%- if hook.is_hook: %}
    {"{{ hook.signature.library }}", "{{ hook.apiname }}", (FARPROC) New_{{ hook.apiname }}, (FARPROC *) &Old_{{ hook.apiname }}, {{ hook.signature.special.__int__() }}, {{ hook.signature.minimum }}, NULL, 0, NULL},
    {%- endif %}
{%- endfor %}
    {NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL},
};

const flag_t g_api_flags[MONITOR_HOOKCNT][8] = {
{%- for sig in sigs: %}
    [SIG_{{ sig.apiname }}] = {
        {%- for flag in sig.flags: %}
        FLAG_{{ flag.flagname }},
        {%- endfor %}
        FLAG_NONE,
    },
{%- endfor %}
};

const char *g_api_flagnames[MONITOR_HOOKCNT][8] = {
{%- for sig in sigs: %}
    [SIG_{{ sig.apiname }}] = {
        {%- for flag in sig.flags: %}
        "{{ flag.name }}",
        {%- endfor %}
        NULL,
    },
{%- endfor %}
};
